#include <iostream>
#include <fstream>
#include <cmath>

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <signal.h>

#include <sys/time.h>

#define _USE_MATH_DEFINES
#define M_PI_8 (0.5 * M_PI_4)

using namespace std;

int sock, port;

struct msg_t
{
        float f1, f2, f3, f4;
        unsigned mask;
};

void socket_setup()
{
        int socket_desc;
        socket_desc = socket(AF_INET, SOCK_STREAM, 0);
        sockaddr_in sock_name;
        sock_name.sin_family = AF_INET;
        sock_name.sin_addr.s_addr = htonl(INADDR_ANY);
        sock_name.sin_port = htons(1234);
        bind(socket_desc, (sockaddr*)& sock_name, sizeof(sock_name));
        listen(socket_desc, 1);
        fprintf(stderr, "Listening on port %d\n", port);
        sock = accept(socket_desc, 0, 0);
        close(socket_desc);
}

void handle_input(msg_t *m)
{
	if(m->mask&1u<<8) //select dugme - naredba quit
                exit(0);
        float angle = atan2(-m->f2, m->f1);
        float r = std::hypot(m->f1, m->f2); if(r>1) r=1;
        fprintf(stderr, "angle: %.2f, r: %.2f\n, r2: %.2f\n", angle, r, fabs(m->f3));

        /*if(fabs(axis2)<0.05)
                motor_intensity(center_motor, 0);
        else
                motor_intensity(center_motor, axis2);

        if(mask & (1u<<6))
        {
                motor_intensity(left_motor, -1);
                motor_intensity(right_motor, 1);
        }
        else if(mask& (1u<<7))
        {
                motor_intensity(left_motor, 1);
                motor_intensity(right_motor, -1);
        }
        else if(mask& (1u<<3))
        {
                led_switch();
        }


        if(mask&(3u<<6))
        {
                //bilo je pritisnuto okretanje, necemo da gledamo analognu kapicu
                return;
        }


        if(r<0.05)
        {
                motor_intensity(left_motor, +0);
                motor_intensity(left_motor, +0);
                motor_intensity(right_motor, +0);
        }
        else
        {
                if(0 <= angle && angle < M_PI_2)
                {
                        motor_intensity(left_motor, r);
                        motor_intensity(right_motor, r*(1-axis0));
                }
                else if(M_PI_2 <= angle && angle < M_PI)
                {
                        motor_intensity(right_motor, r);
                        motor_intensity(left_motor, r*(1+axis0));
                }
                else if(-7 * M_PI_8 <= angle && angle < -5 * M_PI_8)
                {
                        motor_intensity(right_motor, -r);
                        motor_intensity(left_motor, 0);
                }
                else if(-3 * M_PI_8 <= angle && angle < - M_PI_8)
                        motor_intensity(left_motor, -r);
                        motor_intensity(right_motor, 0);
                }
                else if(-5 * M_PI_8 <= angle && angle <-3*M_PI_8)
                {
                        motor_intensity(left_motor, -r );
                        motor_intensity(right_motor, -r );
                }
        }*/
}

char buf[1024];

int main (int argc, char** argv)
{
	if(argc>1) port = atoi(argv[1]);
        else port = 1234;
        socket_setup();

	ofstream spi("/dev/spidev0.0");
	/*msg_t t;
	t.f1 = 0.9185;
	t.f2 = 0.5234;
	t.f3 = 0.2435;
	t.f4 = 0.7522;
	t.mask = 0x7F;*/

	while (1) 
	{
		int len = recv(sock, buf, 4*4+4, MSG_WAITALL);
                msg_t msg = *(msg_t*)(void*)(&buf);
		++msg.f1;
		++msg.f2;
		++msg.f3;
		//cout << msg.f1 << ' ' << msg.f2 << ' ' << msg.f3 << ' ' << msg.f4 << ' ' << msg.mask << endl;

		//if(len>0)
                //{
cout << (((int) (msg.f1 * 100))) << ' ' << (((int) (msg.f2 * 100))) << ' ' << (((int) (msg.f3 * 100))) << ' ' << msg.mask << endl;

			spi << (char) 255;
			spi << ((char) ((int) (msg.f1 * 100)));
			spi << ((char) ((int) (msg.f2 * 100)));
			spi << ((char) ((int) (msg.f3 * 100)));
			spi << (char) msg.mask << flush;
		//}
	}	
	
	return 0;
}
